<launch>
  <arg name="use_point_cloud" default="false"/>

  <arg name="tf_prefix"         default="" />               <!-- Prefix added to tf frame IDs. It typically contains a trailing '_' unless empty. -->

  <arg name="depth_enabled"           default="true" />           <!-- Enable or disable the depth camera -->
  <arg name="depth_mode"              default="NFOV_2X2BINNED" />  <!-- Set the depth camera mode, which affects FOV, depth range, and camera resolution. See Azure Kinect documentation for full details. Valid options: NFOV_UNBINNED, NFOV_2X2BINNED, WFOV_UNBINNED, WFOV_2X2BINNED -->
  <arg name="color_enabled"           default="true" />           <!-- Enable or disable the color camera -->
  <arg name="color_resolution"        default="3072P" />          <!-- Resolution at which to run the color camera. Valid options: 720P, 1080P, 1440P, 1536P, 2160P, 3072P -->
  <arg name="fps"                     default="5" />             <!-- FPS to run both cameras at. Valid options are 5, 15, and 30 -->
  <arg name="point_cloud"             default="$(arg use_point_cloud)" />           <!-- Generate a point cloud from depth data. Requires depth_enabled -->
  <arg name="rgb_point_cloud"         default="$(arg use_point_cloud)" />           <!-- Colorize the point cloud using the RBG camera. Requires color_enabled and depth_enabled -->
  <arg name="required"                default="false" />          <!-- Argument which specified if the entire launch file should terminate if the node dies -->
  <arg name="sensor_sn"               default="" />               <!-- Sensor serial number. If none provided, the first sensor will be selected -->
  <arg name="recording_file"          default="" />               <!-- Absolute path to a mkv recording file which will be used with the playback api instead of opening a device -->
  <arg name="recording_loop_enabled"  default="false" />          <!-- If set to true the recording file will rewind the beginning once end of file is reached -->

  <arg name="rviz" default="false"/>

  <!-- QR code recognition params -->
  <arg name="qrcode_recognition" default="true" />
  <arg name="marker_size" default="4.5" />
  <arg name="max_new_marker_error" default="0.02" />
  <arg name="max_track_error" default="0.2" />

  <arg name="cam_image_topic" default="/rgb/image_raw" unless="$(arg use_point_cloud)"/>
  <arg name="cam_image_topic" default="/points2" if="$(arg use_point_cloud)"/>
  <arg name="alvar_node_type" default="individualMarkers" if="$(arg use_point_cloud)"/>
  <arg name="alvar_node_type" default="individualMarkersNoKinect" unless="$(arg use_point_cloud)"/>

  <arg name="cam_info_topic" default="/rgb/camera_info" /> 
  <arg name="output_frame" default="/rgb_camera_link" />

  <node pkg="azure_kinect_ros_driver" type="node" name="node" output="screen" required="$(arg required)" respawn="true">
    <param name="depth_enabled"     type="bool"   value="$(arg depth_enabled)" /> 
    <param name="depth_mode"        type="string" value="$(arg depth_mode)" /> 
    <param name="color_enabled"     type="bool"   value="$(arg color_enabled)" /> 
    <param name="color_resolution"  type="string" value="$(arg color_resolution)" /> 
    <param name="fps"               type="int"    value="$(arg fps)" /> 
    <param name="point_cloud"       type="bool"   value="$(arg point_cloud)" /> 
    <param name="rgb_point_cloud"   type="bool"   value="$(arg rgb_point_cloud)" /> 
    <param name="sensor_sn"         type="string" value="$(arg sensor_sn)" />
    <param name="tf_prefix"         type="string" value="$(arg tf_prefix)" />
    <param name="recording_file"          type="string" value="$(arg recording_file)" />
    <param name="recording_loop_enabled"  type="bool"   value="$(arg recording_loop_enabled)" />
  </node>

  <node if="$(arg qrcode_recognition)" name="ar_track_alvar" pkg="ar_track_alvar" type="$(arg alvar_node_type)" respawn="true" output="screen"
   args="$(arg marker_size) $(arg max_new_marker_error) $(arg max_track_error) $(arg cam_image_topic) $(arg cam_info_topic) $(arg output_frame)" />

  <node if="$(arg rviz)" name="$(anon rviz)" pkg="rviz" type="rviz" respawn="false"
    output="screen">
  </node>


</launch>